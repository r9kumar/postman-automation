{
	"info": {
		"_postman_id": "a1546a94-315b-42d3-90d4-e3f13c4ec793",
		"name": "HandsOn",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetUsers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13140219-609b-40a1-90cf-1d2a08baa8a6",
						"exec": [
							"//Validate Schema",
							"eval(pm.environment.get(\"validateSchema\"));",
							"",
							"//Check response time",
							"eval(pm.environment.get(\"validateResponseTime\"));",
							"",
							"//Check response code",
							"eval(pm.environment.get(\"validateResponseStatusCode\"));",
							"",
							"//Assert on Response Status Code Meaning",
							"eval(pm.environment.get(\"validateResponseStatusCodeMeaning\"));",
							"",
							"//Assert on Response Type",
							"eval(pm.environment.get(\"validateResponseIsJSON\"));",
							"",
							"//Assert on Response Header",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"//Assert for Multiple Status Code",
							"pm.test(\"Successful POST request\", function () {",
							"     pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});",
							"",
							"//Assert on Response Text = ctrl + F",
							"pm.test(\"Body matches string = ctrl+F testing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"//Assert one line of response",
							"pm.test(\"Check if user with id = 1 has name = Leanne Graham\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].name).to.be.a('string');",
							"    pm.expect(jsonData[0].name).not.to.be.null;",
							"    pm.expect(jsonData[0].name).to.eql(\"Leanne Graham\");",
							"    pm.expect(jsonData[0].name).to.have.string('anne');",
							"    pm.expect(jsonData[0].name).to.not.have.string('taco');",
							"    ",
							"});",
							"",
							"//Assert all details of any one user with expected hard-coded values of response",
							"pm.test(\"Check all details of any one user with expected hard-coded values\", function () {",
							"    var jsonData = pm.response.json();",
							"    var expectedUserDetail = pm.environment.get(\"expectedUserDetail\"); ",
							"    console.log(\"expectedUserDetail\\n\"+expectedUserDetail);",
							"    var actualUserDetail = JSON.stringify(jsonData[2], undefined, \"\\t\");",
							"    //var actualUserDetail = JSON.stringify(jsonData[0], null, 4);",
							"    console.log(\"actualUserDetail\\n\"+actualUserDetail);",
							"    pm.expect(actualUserDetail).to.eql(expectedUserDetail);",
							"});",
							"",
							"pm.test(\"Check all user name in the response\", function () {",
							"    var jsonData = pm.response.json();",
							"    var userCount = jsonData.length;",
							"    var actualUserNameList = [];",
							"    if(userCount>0){",
							"        for(let i=0; i<userCount; i++){",
							"            actualUserNameList.push(jsonData[i].name);",
							"            pm.expect(jsonData[i].name).to.be.a('string');",
							"            pm.expect(jsonData[i].name).not.to.be.null;",
							"            //var re = /\\w+\\s/g;",
							"            //var re = new RegExp('\\\\w+\\\\s', 'g');",
							"            //var re = /^(.*)$/g;",
							"            var re = /[a-zA-Z\\s]*$/g;",
							"            pm.expect(jsonData[i].name).to.matches(re);",
							"            ",
							"            try{",
							"                var pattern = new RegExp(\"[a-zA-Z]*$\");",
							"                pm.expect(jsonData[i].name).to.matches(pattern);",
							"            } catch(e) {",
							"                console.log(e.message);",
							"            }",
							"           ",
							"            console.log(\"name \"+i+\" ::: \"+jsonData[i].name);",
							"            ",
							"            pm.expect(jsonData[i].id, 'user id should be in between 1 to 10').to.satisfy(function(num) {",
							"                return num >= 1 && num <= 10;",
							"            });",
							"        }",
							"    }",
							"    ",
							"    console.log(\"actual name ::: \"+actualUserNameList);",
							"    ",
							"    pm.expect(actualUserNameList).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(actualUserNameList).to.not.be.empty;",
							"    pm.expect(actualUserNameList).to.have.lengthOf(10);",
							"    pm.expect(actualUserNameList).to.be.an(\"array\").that.include(\"Leanne Graham\");",
							"    pm.expect(actualUserNameList).to.include(\"Leanne Graham\");",
							"    ",
							"    //var expectedUserNameList = [\"Leanne Graham\",\"Ervin Howell\",\"Clementine Bauch\",\"Patricia Lebsack\",\"Chelsey Dietrich\",\"Mrs. Dennis Schulist\",\"Kurtis Weissnat\",\"Nicholas Runolfsdottir V\",\"Glenna Reichert\",\"Clementina DuBuque\"];",
							"    ",
							"    var expectedUserNameList = pm.environment.get(\"expectedUserNameList\").split(\",\");",
							"    console.log(\"expected name ::: \"+expectedUserNameList);",
							"    ",
							"    pm.expect(actualUserNameList).to.eql(expectedUserNameList);",
							"});",
							"",
							"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
							"    let helpers = {};",
							" ",
							"    helpers.verifyCount = function verifyCount(expectedCount) {",
							"        var jsonData = JSON.parse(responseBody);",
							"        tests[\"User count in response is: \" + expectedCount] = jsonData.length === expectedCount;",
							"    }",
							"    ",
							"    helpers.verifyResponseHeader = function verifyResponseHeader(key,value) {",
							"        pm.test(\"Response header ::\"+ key + \" = \" + value + \" is present\", function () {",
							"            pm.response.to.have.header(key);",
							"            pm.response.to.be.header(key,value);",
							"        });",
							"    }",
							" ",
							"    // ...additional helpers",
							" ",
							"    return helpers;",
							"    } + '; loadHelpers();');",
							"",
							"var helpers = eval(globals.loadHelpers);",
							"helpers.verifyCount(10);",
							"var mpExpectedResponseHeader = new Map();",
							"mpExpectedResponseHeader.set(\"Content-Type\", \"application/json; charset=utf-8\") ",
							"    .set(\"Connection\",\"keep-alive\") ",
							"    .set(\"Transfer-Encoding\",\"chunked\") ",
							"    .set(\"Cache-Control\",\"public, max-age=14400\")",
							"    .set(\"Content-Encoding\",\"gzip\"); ",
							"    ",
							"var get_keys = mpExpectedResponseHeader.keys(); ",
							"var get_values = mpExpectedResponseHeader.values();",
							"for(var key of get_keys)",
							" helpers.verifyResponseHeader(key.trim(), mpExpectedResponseHeader.get(key).trim());",
							"",
							"//pm.globals.unset(\"loadHelpers\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b26a00f9-ff60-4926-9994-ddc301dcbbff",
						"exec": [
							"var userSchema = environment.userSchema;",
							"pm.environment.set(\"schema\", userSchema);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUsers Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13140219-609b-40a1-90cf-1d2a08baa8a6",
						"exec": [
							"//Validate Schema",
							"pm.test('Schema Validation', function() {",
							"    var schema = JSON.parse(pm.environment.get(\"schema\", \"userSchema\"));",
							"    //console.log(schema);",
							"    var result = tv4.validateResult(JSON.parse(responseBody),schema);",
							"",
							"    if(!result.valid){",
							"        console.log(\"Validation failed: \", result.error.dataPath);",
							"        console.log(\"Failure Reason: \",result.error);",
							"    }",
							" ",
							"    pm.expect(result.valid).to.be.true;",
							"    pm.environment.unset(\"schema\");",
							"});",
							"",
							"//Check response time",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							" ",
							"//Check response code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Assert on Response Status Code Meaning",
							"pm.test(\"Status is OK\", function(){",
							"    pm.response.to.have.property('status', 'OK');",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"//Assert on Response Type",
							"pm.test(\"Response if Json\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"//Assert on Response Header",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
							"});",
							"",
							"//Assert for Multiple Status Code",
							"pm.test(\"Successful POST request\", function () {",
							"     pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});",
							"",
							"//Assert on Response Text = ctrl + F",
							"pm.test(\"Body matches string = ctrl+F testing\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"});",
							"",
							"//Assert one line of response",
							"pm.test(\"Check if user with id = 1 has name = Leanne Graham\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].name).to.be.a('string');",
							"    pm.expect(jsonData[0].name).not.to.be.null;",
							"    pm.expect(jsonData[0].name).to.eql(\"Leanne Graham\");",
							"    pm.expect(jsonData[0].name).to.have.string('anne');",
							"    pm.expect(jsonData[0].name).to.not.have.string('taco');",
							"    ",
							"});",
							"",
							"pm.test(\"Check all user name in the response\", function () {",
							"    var jsonData = pm.response.json();",
							"    var userCount = jsonData.length;",
							"    var actualUserNameList = [];",
							"    if(userCount>0){",
							"        for(let i=0; i<userCount; i++){",
							"            actualUserNameList.push(jsonData[i].name);",
							"            pm.expect(jsonData[i].name).to.be.a('string');",
							"            pm.expect(jsonData[i].name).not.to.be.null;",
							"            //var re = /\\w+\\s/g;",
							"            //var re = new RegExp('\\\\w+\\\\s', 'g');",
							"            //var re = /^(.*)$/g;",
							"            var re = /[a-zA-Z\\s]*$/g;",
							"            pm.expect(jsonData[i].name).to.matches(re);",
							"            ",
							"            try{",
							"                var pattern = new RegExp(\"[a-zA-Z]*$\");",
							"                pm.expect(jsonData[i].name).to.matches(pattern);",
							"            } catch(e) {",
							"                console.log(e.message);",
							"            }",
							"           ",
							"            console.log(\"name \"+i+\" ::: \"+jsonData[i].name);",
							"            ",
							"            pm.expect(jsonData[i].id, 'user id should be in between 1 to 10').to.satisfy(function(num) {",
							"                return num >= 1 && num <= 10;",
							"            });",
							"        }",
							"    }",
							"    ",
							"    console.log(\"actual name ::: \"+actualUserNameList);",
							"    ",
							"    pm.expect(actualUserNameList).to.be.an(\"array\").that.is.not.empty;",
							"    pm.expect(actualUserNameList).to.not.be.empty;",
							"    pm.expect(actualUserNameList).to.have.lengthOf(10);",
							"    pm.expect(actualUserNameList).to.be.an(\"array\").that.include(\"Leanne Graham\");",
							"    pm.expect(actualUserNameList).to.include(\"Leanne Graham\");",
							"    ",
							"    //var expectedUserNameList = [\"Leanne Graham\",\"Ervin Howell\",\"Clementine Bauch\",\"Patricia Lebsack\",\"Chelsey Dietrich\",\"Mrs. Dennis Schulist\",\"Kurtis Weissnat\",\"Nicholas Runolfsdottir V\",\"Glenna Reichert\",\"Clementina DuBuque\"];",
							"    ",
							"    var expectedUserNameList = pm.environment.get(\"expectedUserNameList\").split(\",\");",
							"    console.log(\"expected name ::: \"+expectedUserNameList);",
							"    ",
							"    pm.expect(actualUserNameList).to.eql(expectedUserNameList);",
							"});",
							"",
							"postman.setGlobalVariable(\"loadHelpers\", function loadHelpers() {",
							"    let helpers = {};",
							" ",
							"    helpers.verifyCount = function verifyCount(expectedCount) {",
							"        var jsonData = JSON.parse(responseBody);",
							"        tests[\"User count in response is: \" + expectedCount] = jsonData.length === expectedCount;",
							"    }",
							"    ",
							"    helpers.verifyResponseHeader = function verifyResponseHeader(key,value) {",
							"        pm.test(\"Response header ::\"+ key + \" = \" + value + \" is present\", function () {",
							"            pm.response.to.have.header(key);",
							"            pm.response.to.be.header(key,value);",
							"        });",
							"    }",
							" ",
							"    // ...additional helpers",
							" ",
							"    return helpers;",
							"    } + '; loadHelpers();');",
							"",
							"var helpers = eval(globals.loadHelpers);",
							"helpers.verifyCount(10);",
							"var mpExpectedResponseHeader = new Map();",
							"mpExpectedResponseHeader.set(\"Content-Type\", \"application/json; charset=utf-8\") ",
							"    .set(\"Connection\",\"keep-alive\") ",
							"    .set(\"Transfer-Encoding\",\"chunked\") ",
							"    .set(\"Cache-Control\",\"public, max-age=14400\")",
							"    .set(\"Content-Encoding\",\"gzip\"); ",
							"    ",
							"var get_keys = mpExpectedResponseHeader.keys(); ",
							"var get_values = mpExpectedResponseHeader.values();",
							"for(var key of get_keys)",
							" helpers.verifyResponseHeader(key.trim(), mpExpectedResponseHeader.get(key).trim());",
							"",
							"//pm.globals.unset(\"loadHelpers\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b26a00f9-ff60-4926-9994-ddc301dcbbff",
						"exec": [
							"var userSchema = environment.userSchema;",
							"pm.environment.set(\"schema\", userSchema);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	]
}